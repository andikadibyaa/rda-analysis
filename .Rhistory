plot(fcast)
install.packages("forecast")
install.packages("forecast")
library(forecast)
model1<-arima(data$harga,order = c(0,1,0))
model1
accuracy(model1)
accuracy(fcast)
pred1<-forecast(model1,h=12)
pred1
model2<-arima(data$harga,order = c(1,1,1))
model2
pred2<-forecast(model2,h=12)
pred2
plot(pred2)
model3<-arima(data$harga,order = c(2,1,0))
model3
pred3<-forecast(model3,h=12)
pred3
forecast(pred3)
plot(pred3)
model4<-arima(data$harga,order = c(0,1,1))
model4
pred4<-forecast(model4,h=12)
pred4
acf(train.diff, lag.max=35, main="ACF difference 1 Harga Beras")
pacf(train.diff, lag.max=35, main="PACF difference 1 Harga Beras")
acf(train.diff, lag.max=35, main="ACF difference 1 Harga Beras")
acf(train.diff, lag.max=35, main="ACF difference 1 Harga Beras")
pacf(train.diff, lag.max=35, main="PACF difference 1 Harga Beras")
plot(forecast(arima(data$harga,order = c(3,1,0))))
plot(forecast(arima(data$harga,order = c(3,1,0))))
forecast(arima(data$harga,order = c(3,1,0)))
forecast(arima(data$harga,order = c(3,1,1)))
accuracy(forecast(arima(data$harga,order = c(3,1,0))))
accuracy(fcast)
pacf(train.diff, lag.max=35, main="PACF difference 1 Harga Beras")
accuracy(forecast(arima(data$harga,order = c(11,1,0))))
accuracy(forecast(arima(data$harga,order = c(11,1,11))))
accuracy(forecast(arima(data$harga,order = c(11,1,12))))
getwd()
plot.ts(forecasthybrid, lty=1, xlab = 'bulan', ylab = 'ramalan harga',
main = 'Ramalan Arima (2,1,2)-Garch(1,1) Harga Beras Jawa Timur 2024')
forecasthybrid <- ugarchforecast(fit, n.ahead = 12)
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(2,1,2)))
fit <- ugarchfit(spec, data = data$harga)
forecasthybrid <- ugarchforecast(fit, n.ahead = 12)
library(rugarch)
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(2,1,2)))
fit <- ugarchfit(spec, data = data$harga)
forecasthybrid <- ugarchforecast(fit, n.ahead = 12)
forecasthybrid
plot.ts(forecasthybrid, lty=1, xlab = 'bulan', ylab = 'ramalan harga',
main = 'Ramalan Arima (2,1,2)-Garch(1,1) Harga Beras Jawa Timur 2024')
plot.ts(forecasthybrid@forecast$seriesFor, lty=1, xlab = 'bulan', ylab = 'ramalan harga',
main = 'Ramalan Arima (2,1,2)-Garch(1,1) Harga Beras Jawa Timur 2024')
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,0)),
mean.model = list(armaOrder = c(2,1,2)))
fit <- ugarchfit(spec, data = data$harga)
forecasthybrid <- ugarchforecast(fit, n.ahead = 12)
plot.ts(forecasthybrid@forecast$seriesFor, lty=1, xlab = 'bulan', ylab = 'ramalan harga',
main = 'Ramalan Arima (2,1,2)-Garch(1,1) Harga Beras Jawa Timur 2024')
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(0,1)),
mean.model = list(armaOrder = c(2,1,2)))
plot.ts(forecasthybrid@forecast$seriesFor, lty=1, xlab = 'bulan', ylab = 'ramalan harga',
main = 'Ramalan Arima (2,1,2)-Garch(1,1) Harga Beras Jawa Timur 2024')
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(2,1,2)))
plot.ts(forecasthybrid@forecast$seriesFor, lty=1, xlab = 'bulan', ylab = 'ramalan harga',
main = 'Ramalan Arima (2,1,2)-Garch(1,1) Harga Beras Jawa Timur 2024')
forecasthybrid
plot(forecasthybrid)
library(rugarch)
plot(forecasthybrid@forecast$seriesFor)
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(2,1,2)))
forecasthybrid
df4<-data.frame(forecasthybrid@forecast$seriesFor)
plot(df4)
plot(forecasthybrid@forecast$sigmaFor)
plot(forecasthybrid@forecast$seriesFor)
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(2,1,2)))
fit <- ugarchfit(spec, data = data$harga)
forecasthybrid <- ugarchforecast(fit, n.ahead = 12)
forecasthybrid
plot(forecasthybrid@forecast$seriesFor)
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,0)),
mean.model = list(armaOrder = c(2,1,2)))
fit <- ugarchfit(spec, data = data$harga)
forecasthybrid <- ugarchforecast(fit, n.ahead = 12)
forecasthybrid
df4<-data.frame(forecasthybrid@forecast$seriesFor)
plot(forecasthybrid@forecast$seriesFor)
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(0,1)),
mean.model = list(armaOrder = c(2,1,2)))
fit <- ugarchfit(spec, data = data$harga)
forecasthybrid <- ugarchforecast(fit, n.ahead = 12)
plot(forecasthybrid@forecast$seriesFor)
par(mfrow=c(2,1))
Acf((model7$residuals)^2,
main ='ACF Data',
lag.max = 30)
library(rugarch)
par(mfrow=c(2,1))
Acf((model7$residuals)^2,
main ='ACF Data',
lag.max = 30)
par(mfrow=c(2,1))
Acf((model7$residuals)^2,
main ='ACF Data',
lag.max = 30)
#modelling garch
par(mfrow=c(2,1))
Acf((model7$residuals)^2,
main ='ACF Data',
lag.max = 30)
library(xts)
library(FinTS)
library(rugarch)
library(aTSA)
library(forecast)
Acf((model7$residuals)^2,
main ='ACF Data',
lag.max = 30)
model7 <- arima(data$harga, order=c(2,1,2), method="ML")
model7
Acf((model7$residuals)^2,
main ='ACF Data',
lag.max = 30)
Pacf((model7$residuals)^2,
main ='PACF Data',
lag.max = 30)
spec1 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(2,1,2)))
spec2 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,0)),
mean.model = list(armaOrder = c(2,1,2)))
spec3 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(0,1)),
mean.model = list(armaOrder = c(2,1,2)))
dataharga <- ts(data$harga)
fit1 <- ugarchfit(spec1, data = dataharga)
fit2 <- ugarchfit(spec2, data = dataharga)
fit3 <- ugarchfit(spec3, data = dataharga)
crit1 <- infocriteria(fit1)
crit2 <- infocriteria(fit2)
crit3 <- infocriteria(fit3)
crit1
crit2
crit3
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(2,1,2)))
fit <- ugarchfit(spec, data = data$harga)
forecasthybrid <- ugarchforecast(fit, n.ahead = 12)
plot(forecasthybrid@forecast$seriesFor)
forecasthybrid
Acf((model7$residuals)^2,
main ='ACF Data',
lag.max = 30)
Acf((model7$residuals)^2,
main ='ACF Data',
lag.max = 40)
Pacf((model7$residuals)^2,
main ='PACF Data',
lag.max = 40)
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(34,1)),
mean.model = list(armaOrder = c(2,1,2)))
forecasthybrid
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(34,1)),
mean.model = list(armaOrder = c(2,1,2)))
fit <- ugarchfit(spec, data = data$harga)
forecasthybrid <- ugarchforecast(fit, n.ahead = 12)
forecasthybrid
plot(forecasthybrid@forecast$seriesFor)
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(34,34)),
mean.model = list(armaOrder = c(2,1,2)))
fit <- ugarchfit(spec, data = data$harga)
forecasthybrid <- ugarchforecast(fit, n.ahead = 12)
plot(forecasthybrid@forecast$seriesFor)
plot(forecasthybrid@forecast$seriesFor)
forecasthybrid <- ugarchforecast(fit, n.ahead = 12)
forecasthybrid
eacf((model7$residuals)^2)
library(fpp2)
library(tseries)
library(TSstudio)
library(adfExplorer)
library(TSA)
library(ggplot2)
library(dplyr)
library(zoo)
library(MASS)
library(EnvStats)
library(lmtest)
library(forecast)
library(aTSA)
library(remotes)
library(fit)
eacf((model7$residuals)^2)
spec4 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(2,0)),
mean.model = list(armaOrder = c(2,1,2)))
spec5 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(2,1)),
mean.model = list(armaOrder = c(2,1,2)))
spec6 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(3,0)),
mean.model = list(armaOrder = c(2,1,2)))
spec7 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(3,1)),
mean.model = list(armaOrder = c(2,1,2)))
spec8 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(4,0)),
mean.model = list(armaOrder = c(2,1,2)))
spec9 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(4,1)),
mean.model = list(armaOrder = c(2,1,2)))
spec10 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(5,0)),
mean.model = list(armaOrder = c(2,1,2)))
dataharga <- ts(data$harga)
fit4 <- ugarchfit(spec3, data = dataharga)
fit5 <- ugarchfit(spec3, data = dataharga)
fit6 <- ugarchfit(spec3, data = dataharga)
fit7 <- ugarchfit(spec3, data = dataharga)
fit8 <- ugarchfit(spec3, data = dataharga)
fit9 <- ugarchfit(spec3, data = dataharga)
fit10 <- ugarchfit(spec3, data = dataharga)
crit1 <- infocriteria(fit1)
crit2 <- infocriteria(fit2)
crit3 <- infocriteria(fit3)
crit4 <- infocriteria(fit4)
crit5 <- infocriteria(fit5)
crit6 <- infocriteria(fit6)
crit7 <- infocriteria(fit7)
crit8 <- infocriteria(fit8)
crit9 <- infocriteria(fit9)
crit4
crit5
crit6
fit1 <- ugarchfit(spec1, data = dataharga)
fit2 <- ugarchfit(spec2, data = dataharga)
fit3 <- ugarchfit(spec3, data = dataharga)
fit4 <- ugarchfit(spec4, data = dataharga)
fit5 <- ugarchfit(spec5, data = dataharga)
fit6 <- ugarchfit(spec6, data = dataharga)
fit7 <- ugarchfit(spec7, data = dataharga)
fit8 <- ugarchfit(spec8, data = dataharga)
fit9 <- ugarchfit(spec9, data = dataharga)
fit10 <- ugarchfit(spec10, data = dataharga)
crit1 <- infocriteria(fit1)
crit2 <- infocriteria(fit2)
crit3 <- infocriteria(fit3)
crit4 <- infocriteria(fit4)
crit5 <- infocriteria(fit5)
crit6 <- infocriteria(fit6)
crit4
crit5
crit6
fit6 <- ugarchfit(spec6, data = dataharga)
fit7 <- ugarchfit(spec7, data = dataharga)
fit8 <- ugarchfit(spec8, data = dataharga)
fit9 <- ugarchfit(spec9, data = dataharga)
fit10 <- ugarchfit(spec10, data = dataharga)
crit6 <- infocriteria(fit6)
crit6 <- infocriteria(fit6)
crit7
crit8
spec4 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(2,0)),
mean.model = list(armaOrder = c(2,1,2)))
spec5 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(2,1)),
mean.model = list(armaOrder = c(2,1,2)))
spec6 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(3,0)),
mean.model = list(armaOrder = c(2,1,2)))
spec7 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(3,1)),
mean.model = list(armaOrder = c(2,1,2)))
spec8 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(4,0)),
mean.model = list(armaOrder = c(2,1,2)))
spec9 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(4,1)),
mean.model = list(armaOrder = c(2,1,2)))
spec10 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(5,0)),
mean.model = list(armaOrder = c(2,1,2)))
fit5 <- ugarchfit(spec5, data = dataharga)
fit6 <- ugarchfit(spec6, data = dataharga)
fit7 <- ugarchfit(spec7, data = dataharga)
fit8 <- ugarchfit(spec8, data = dataharga)
fit9 <- ugarchfit(spec9, data = dataharga)
fit10 <- ugarchfit(spec10, data = dataharga)
crit5 <- infocriteria(fit5)
crit6 <- infocriteria(fit6)
crit7 <- infocriteria(fit7)
crit8 <- infocriteria(fit8)
crit9 <- infocriteria(fit9)
fit6 <- ugarchfit(spec6, data = dataharga)
fit7 <- ugarchfit(spec7, data = dataharga)
fit8 <- ugarchfit(spec8, data = dataharga)
fit9 <- ugarchfit(spec9, data = dataharga)
fit10 <- ugarchfit(spec10, data = dataharga)
crit6 <- infocriteria(fit6)
crit7 <- infocriteria(fit7)
crit8 <- infocriteria(fit8)
crit9 <- infocriteria(fit9)
crit7
crit8
crit9
crit10
calculate_mape(fit,fitted(forecast()))
install.packages("MLmetrics")
library(MLmetrics)
MAPE(fit)
MAPE(fit, data$waktu)
actual_values <- window(dataharga, start = end(dataharga) - 13)
# Hitung MAPE
mape <- mean(abs((actual_values - as.numeric(fitted(forecast))) / actual_values)) * 100
# Hitung MAPE
mape <- mean(abs((actual_values - as.numeric(fitted(forecasthybrid))) / actual_values)) * 100
mape <- mean(abs((actual_values - as.numeric(fitted(forecasthybrid))) / actual_values)) * 100
mape
actual_values <- window(dataharga, start = end(dataharga) - 1)
mape <- mean(abs((actual_values - as.numeric(fitted(forecasthybrid))) / actual_values)) * 100
actual_values <- window(dataharga, start = end(dataharga) - 12)
mape <- mean(abs((actual_values - as.numeric(fitted(forecasthybrid))) / actual_values)) * 100
mape
actual_values <- window(data$harga, start = end(data$harga) - 12)
mape <- mean(abs((actual_values - as.numeric(fitted(forecasthybrid))) / actual_values)) * 100
mape
actual_values <- window(data$harga, start = end(data$harga) - 13)
# Hitung MAPE
mape <- mean(abs((actual_values - as.numeric(fitted(forecasthybrid))) / actual_values)) * 100
actual_values
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(0,1)),
mean.model = list(armaOrder = c(2,1,2)))
fit <- ugarchfit(spec, data = data$harga)
forecasthybrid <- ugarchforecast(fit, n.ahead = 12)
mape <- mean(abs((actual_values - as.numeric(fitted(forecasthybrid))) / actual_values)) * 100
mape
residuals <- residuals(fit1)
squared_residuals <- residuals^2
ljung_box_test <- Box.test(squared_residuals, lag = 30, type = "Ljung-Box")
print(paste("Ljung-Box Test p-value: ", ljung_box_test$p.value))
aTSA::arch.test(model7)
aTSA::arch.test(fit)
residuals <- residuals(fit1)
squared_residuals <- residuals^2
ljung_box_test <- Box.test(squared_residuals, lag = 30, type = "Ljung-Box")
print(paste("Ljung-Box Test p-value: ", ljung_box_test$p.value))
class(fit)
Box.test(residuals(fit1), lag = 30, type = 'Ljung-Box')
for (i in 1:30) {
ArchTest <- ArchTest(fit$residuals, lags=i, demean=TRUE)
cat("P Value LM Test lag ke", i,"adalah" , ArchTest$p.value, "\n") }
library(rugarch)
for (i in 1:30) {
ArchTest <- ArchTest(fit$residuals, lags=i, demean=TRUE)
cat("P Value LM Test lag ke", i,"adalah" , ArchTest$p.value, "\n") }
library(FinTS)
library(lmtest)
library(aTSA)
library(rugarch)
library(MLmetrics)
for (i in 1:30) {
ArchTest <- ArchTest(model7$residuals, lags=i, demean=TRUE)
cat("P Value LM Test lag ke", i,"adalah" , ArchTest$p.value, "\n") }
ArchTest(model7$residuals)
ArchTest <- ArchTest(fit$residuals, lags=i, demean=TRUE)
for (i in 1:30) {
ArchTest <- ArchTest(fit@fit$residuals, lags=i, demean=TRUE)
cat("P Value LM Test lag ke", i,"adalah" , ArchTest$p.value, "\n") }
aTSA::arch.test(fit)
fit_garch1 <- ugarchfit(spec = garch_spec, data = vol[-c(1:19),2])
fit_garch1 <- ugarchfit(spec = spec, data = vol[-c(1:19),2])
fit <- ugarchfit(spec, data = data$harga)
fit
aTSA::arch.test(model7)
bptest(fit)
bptest(fit@fit$residuals)
bptest_model <- bptest(fit@fit$residuals ~ fitted(fit))
bptest_model
bptest_model <- bptest(model7$residuals ~ fitted(model7))
bptest_model
fit
bptest_model <- bptest(model7$residuals ~ fitted(model7))
bptest_model
model7
bestforecast
#forecasting best model
bestforecast<-forecast::forecast(aic7, h=12)
aic7 <- Arima(data$harga, order=c(2,1,2), method="ML")
#forecasting best model
bestforecast<-forecast::forecast(aic7, h=12)
aic7 <- Arima(data$harga, order=c(2,1,2), method="ML")
library(fpp2)
library(tseries)
library(TSstudio)
library(adfExplorer)
library(TSA)
library(ggplot2)
library(dplyr)
library(zoo)
library(MASS)
library(EnvStats)
library(lmtest)
library(forecast)
library(aTSA)
library(remotes)
library(fit)
library(TSstudio)
library(tseries)
aic7 <- Arima(data$harga, order=c(2,1,2), method="ML")
#forecasting best model
bestforecast<-forecast::forecast(aic7, h=12)
bestforecast
bestforecast$series
bestforecast$fitted
bestforecast$residuals
bptest_model <- bptest(bestforecast$residuals ~ fitted(bestforecast))
bptest_model
bptest_model <- bptest(bestforecast$residuals ~ fitted(bestforecast$fitted))
bptest_model <- bptest(bestforecast$residuals ~ fitted(bestforecast$fitted))
bptest_model
bptest_model <- bptest(model7$residuals ~ fitted(model7))
bptest_model
bptest_model <- bptest(model7$residuals ~ fitted(model7))
bptest_model
bptest_model <- bptest(bestforecast$residuals ~ fitted(bestforecast))
bptest_model
bptest_model <- bptest(fit@fit$residuals ~ fitted(fit@fit$))
bptest_model <- bptest(fit@fit$residuals ~ fitted(fit))
bptest_model
fit
fit_garch1 <- ugarchfit(spec = spec, data = vol[-c(1:19),2])
#checking heteroskedasticity
fit_garch1 <- ugarchfit(spec = spec, data = vol[-c(1:19),2])
getwd()
# Data penjualan
tahun <- c(2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022)
sales <- c(151, 160, 178, 190, 199, 210, 222, 230, 235, 250)
plot(tahun, sales, type="o", main="Penjualan Sirup", xlab="Tahun", ylab="Penjualan (juta unit)")
n <- 5
moving_avg <- rep(NA, length(sales))
for (i in (n+1):length(sales)) {
moving_avg[i] <- mean(sales[(i-n):(i-1)])
}
ramalan_moving_avg <- rep(NA, 2)
ramalan_moving_avg[1] <- mean(sales[(length(sales)-n+1):length(sales)])
ramalan_moving_avg[2] <- mean(sales[(length(sales)-n+2):length(sales)]) # Ramalan untuk 2024
ramalan_moving_avg[1]
ramalan_moving_avg[2]
n <- 5
moving_avg <- rep(NA, length(sales))
for (i in (n+1):length(sales)) {
moving_avg[i] <- 2 * mean(sales[(i-n):(i-1)]) - mean(moving_avg[(i-n):(i-1)])
}
ramalan_moving_avg <- rep(NA, 2)
ramalan_moving_avg[1] <- 2 * mean(sales[(length(sales)-n+1):length(sales)]) - mean(moving_avg[(length(sales)-n+1):length(sales)])
ramalan_moving_avg[2] <- 2 * mean(sales[(length(sales)-n+2):length(sales)]) - mean(moving_avg[(length(sales)-n+2):length(sales)]) # Ramalan untuk 2024
ramalan_moving_avg[1]
tahun <- c(2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022)
sales <- c(151, 160, 178, 190, 199, 210, 222, 230, 235, 250)
n <- 5
moving_avg <- rep(NA, length(sales))
for (i in (n+1):length(sales)) {
moving_avg[i] <- 2 * mean(sales[(i-n):(i-1)]) - mean(moving_avg[(i-n):(i-1)])
}
ramalan_moving_avg <- rep(NA, 2)
ramalan_moving_avg[1] <- 2 * mean(sales[(length(sales)-n+1):length(sales)]) - mean(moving_avg[(length(sales)-n+1):length(sales)])
ramalan_moving_avg[2] <- 2 * mean(sales[(length(sales)-n+2):length(sales)]) - mean(moving_avg[(length(sales)-n+2):length(sales)]) # Ramalan untuk 2024
ramalan_moving_avg[1]
ramalan_moving_avg[1] <- 2 * mean(sales[(length(sales)-n+1):length(sales)]) - mean(moving_avg[(length(sales)-n+1):length(sales)])
ramalan_moving_avg[1]
n <- 5
moving_avg <- rep(NA, length(sales))
for (i in (n+1):length(sales)) {
moving_avg[i] <- 2 * mean(sales[(i-n):(i-1)]) - mean(moving_avg[(i-n):(i-1)])
moving_avg <- rep(NA, length(sales))
for (i in (n+1):length(sales)) {
moving_avg[i] <- 2 * mean(sales[(i-n):(i-1)]) - mean(moving_avg[(i-n):(i-1)])
}
n <- 5
moving_avg <- rep(NA, length(sales))
for (i in (n+1):length(sales)) {
moving_avg[i] <- 2 * mean(sales[(i-n):(i-1)]) - mean(moving_avg[(i-n):(i-1)])
}
ramalan_moving_avg <- rep(NA, 2)
ramalan_moving_avg[1] <- 2 * mean(sales[(length(sales)-n+1):length(sales)]) - mean(moving_avg[(length(sales)-n+1):length(sales)])
ramalan_moving_avg[2] <- 2 * mean(sales[(length(sales)-n+2):length(sales)]) - mean(moving_avg[(length(sales)-n+2):length(sales)]) # Ramalan untuk 2024
ramalan_moving_avg[1]
ramalan_moving_avg[1]
ramalan_moving_avg[1] <- 2 * mean(sales[(length(sales)-n+1):length(sales)]) - mean(moving_avg[(length(sales)-n+1):length(sales)])
ramalan_moving_avg[1]
str(datapca)
datapca<-read.xlsx('pca.xlsx') #Membaca data
setwd('C:/Users/andik/OneDrive/Documents/PCARDA')
getwd()
library(openxlsx)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(stats)
library(MASS)
datapca<-read.xlsx('pca.xlsx') #Membaca data
pr.out <- prcomp(datapca1, center = TRUE, scale = TRUE, retx = TRUE)
datapca1<-datapca[, -c(1:3)]
pr.out <- prcomp(datapca1, center = TRUE, scale = TRUE, retx = TRUE)
screeplot(pr.out,type = "line")
abline(h = 1, col = "red", lty = 3)
#nampilin biplot
biplot(pr.out, scale = 0)
datapca1
datapca
rownames(datapca1)<-paste0(datapca$Kode.spesies)
datapca1
pr.out <- prcomp(datapca1, center = TRUE, scale = TRUE, retx = TRUE)
pr.out
#nampilin biplot
biplot(pr.out, scale = 0)
